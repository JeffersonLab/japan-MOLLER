#pragma once

// generated by /home/wdconinc/git/japan-MOLLER/.worktree/sqlpp/thirdparty/sqlpp11-install/bin/sqlpp11-ddl2cpp -identity-naming -no-timestamp-warning /home/wdconinc/git/japan-MOLLER/.worktree/sqlpp/Parity/prminput/qwparity_schema.sql /home/wdconinc/git/japan-MOLLER/.worktree/sqlpp/Parity/include/QwParitySchema QwParitySchema

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace QwParitySchema
{
  namespace db_schema_
  {
    struct db_schema_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "db_schema_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T db_schema_id;
            T& operator()() { return db_schema_id; }
            const T& operator()() const { return db_schema_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct major_release_number
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "major_release_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T major_release_number;
            T& operator()() { return major_release_number; }
            const T& operator()() const { return major_release_number; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct minor_release_number
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "minor_release_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minor_release_number;
            T& operator()() { return minor_release_number; }
            const T& operator()() const { return minor_release_number; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct point_release_number
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "point_release_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T point_release_number;
            T& operator()() { return point_release_number; }
            const T& operator()() const { return point_release_number; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct script_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "script_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T script_name;
            T& operator()() { return script_name; }
            const T& operator()() const { return script_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace db_schema_

  struct db_schema: sqlpp::table_t<db_schema,
               db_schema_::db_schema_id,
               db_schema_::major_release_number,
               db_schema_::minor_release_number,
               db_schema_::point_release_number,
               db_schema_::time,
               db_schema_::script_name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "db_schema";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T db_schema;
        T& operator()() { return db_schema; }
        const T& operator()() const { return db_schema; }
      };
    };
  };
  namespace good_for_
  {
    struct good_for_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "good_for_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T good_for_id;
            T& operator()() { return good_for_id; }
            const T& operator()() const { return good_for_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace good_for_

  struct good_for: sqlpp::table_t<good_for,
               good_for_::good_for_id,
               good_for_::type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "good_for";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T good_for;
        T& operator()() { return good_for; }
        const T& operator()() const { return good_for; }
      };
    };
  };
  namespace run_quality_
  {
    struct run_quality_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "run_quality_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T run_quality_id;
            T& operator()() { return run_quality_id; }
            const T& operator()() const { return run_quality_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace run_quality_

  struct run_quality: sqlpp::table_t<run_quality,
               run_quality_::run_quality_id,
               run_quality_::type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "run_quality";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T run_quality;
        T& operator()() { return run_quality; }
        const T& operator()() const { return run_quality; }
      };
    };
  };
  namespace run_
  {
    struct run_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "run_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T run_id;
            T& operator()() { return run_id; }
            const T& operator()() const { return run_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct run_number
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "run_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T run_number;
            T& operator()() { return run_number; }
            const T& operator()() const { return run_number; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct slug
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slug";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slug;
            T& operator()() { return slug; }
            const T& operator()() const { return slug; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct wien_slug
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wien_slug";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wien_slug;
            T& operator()() { return wien_slug; }
            const T& operator()() const { return wien_slug; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct injector_slug
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "injector_slug";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T injector_slug;
            T& operator()() { return injector_slug; }
            const T& operator()() const { return injector_slug; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct run_type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "run_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T run_type;
            T& operator()() { return run_type; }
            const T& operator()() const { return run_type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct start_time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T start_time;
            T& operator()() { return start_time; }
            const T& operator()() const { return start_time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct end_time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "end_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T end_time;
            T& operator()() { return end_time; }
            const T& operator()() const { return end_time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct n_mps
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n_mps";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n_mps;
            T& operator()() { return n_mps; }
            const T& operator()() const { return n_mps; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n_qrt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n_qrt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n_qrt;
            T& operator()() { return n_qrt; }
            const T& operator()() const { return n_qrt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace run_

  struct run: sqlpp::table_t<run,
               run_::run_id,
               run_::run_number,
               run_::slug,
               run_::wien_slug,
               run_::injector_slug,
               run_::run_type,
               run_::start_time,
               run_::end_time,
               run_::n_mps,
               run_::n_qrt,
               run_::comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "run";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T run;
        T& operator()() { return run; }
        const T& operator()() const { return run; }
      };
    };
  };
  namespace runlet_
  {
    struct runlet_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "runlet_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T runlet_id;
            T& operator()() { return runlet_id; }
            const T& operator()() const { return runlet_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct run_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "run_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T run_id;
            T& operator()() { return run_id; }
            const T& operator()() const { return run_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct run_number
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "run_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T run_number;
            T& operator()() { return run_number; }
            const T& operator()() const { return run_number; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct segment_number
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "segment_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T segment_number;
            T& operator()() { return segment_number; }
            const T& operator()() const { return segment_number; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct full_run
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "full_run";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T full_run;
            T& operator()() { return full_run; }
            const T& operator()() const { return full_run; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct start_time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T start_time;
            T& operator()() { return start_time; }
            const T& operator()() const { return start_time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct end_time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "end_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T end_time;
            T& operator()() { return end_time; }
            const T& operator()() const { return end_time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct first_mps
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "first_mps";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T first_mps;
            T& operator()() { return first_mps; }
            const T& operator()() const { return first_mps; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct last_mps
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_mps";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T last_mps;
            T& operator()() { return last_mps; }
            const T& operator()() const { return last_mps; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace runlet_

  struct runlet: sqlpp::table_t<runlet,
               runlet_::runlet_id,
               runlet_::run_id,
               runlet_::run_number,
               runlet_::segment_number,
               runlet_::full_run,
               runlet_::start_time,
               runlet_::end_time,
               runlet_::first_mps,
               runlet_::last_mps,
               runlet_::comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "runlet";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T runlet;
        T& operator()() { return runlet; }
        const T& operator()() const { return runlet; }
      };
    };
  };
  namespace seeds_
  {
    struct seed_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seed_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seed_id;
            T& operator()() { return seed_id; }
            const T& operator()() const { return seed_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct first_run_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "first_run_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T first_run_id;
            T& operator()() { return first_run_id; }
            const T& operator()() const { return first_run_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct last_run_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_run_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T last_run_id;
            T& operator()() { return last_run_id; }
            const T& operator()() const { return last_run_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct seed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seed;
            T& operator()() { return seed; }
            const T& operator()() const { return seed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace seeds_

  struct seeds: sqlpp::table_t<seeds,
               seeds_::seed_id,
               seeds_::first_run_id,
               seeds_::last_run_id,
               seeds_::seed,
               seeds_::comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "seeds";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T seeds;
        T& operator()() { return seeds; }
        const T& operator()() const { return seeds; }
      };
    };
  };
  namespace analysis_
  {
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct runlet_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "runlet_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T runlet_id;
            T& operator()() { return runlet_id; }
            const T& operator()() const { return runlet_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct seed_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seed_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seed_id;
            T& operator()() { return seed_id; }
            const T& operator()() const { return seed_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct bf_checksum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bf_checksum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bf_checksum;
            T& operator()() { return bf_checksum; }
            const T& operator()() const { return bf_checksum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct beam_mode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beam_mode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beam_mode;
            T& operator()() { return beam_mode; }
            const T& operator()() const { return beam_mode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct n_mps
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n_mps";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n_mps;
            T& operator()() { return n_mps; }
            const T& operator()() const { return n_mps; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n_qrt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n_qrt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n_qrt;
            T& operator()() { return n_qrt; }
            const T& operator()() const { return n_qrt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct first_event
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "first_event";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T first_event;
            T& operator()() { return first_event; }
            const T& operator()() const { return first_event; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct last_event
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_event";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T last_event;
            T& operator()() { return last_event; }
            const T& operator()() const { return last_event; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct segment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "segment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T segment;
            T& operator()() { return segment; }
            const T& operator()() const { return segment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct slope_calculation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slope_calculation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slope_calculation;
            T& operator()() { return slope_calculation; }
            const T& operator()() const { return slope_calculation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct slope_correction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slope_correction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slope_correction;
            T& operator()() { return slope_correction; }
            const T& operator()() const { return slope_correction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct root_version
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "root_version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T root_version;
            T& operator()() { return root_version; }
            const T& operator()() const { return root_version; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct root_file_time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "root_file_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T root_file_time;
            T& operator()() { return root_file_time; }
            const T& operator()() const { return root_file_time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct root_file_host
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "root_file_host";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T root_file_host;
            T& operator()() { return root_file_host; }
            const T& operator()() const { return root_file_host; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct root_file_user
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "root_file_user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T root_file_user;
            T& operator()() { return root_file_user; }
            const T& operator()() const { return root_file_user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct analyzer_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analyzer_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analyzer_name;
            T& operator()() { return analyzer_name; }
            const T& operator()() const { return analyzer_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct analyzer_argv
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analyzer_argv";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analyzer_argv;
            T& operator()() { return analyzer_argv; }
            const T& operator()() const { return analyzer_argv; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct analyzer_svn_rev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analyzer_svn_rev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analyzer_svn_rev;
            T& operator()() { return analyzer_svn_rev; }
            const T& operator()() const { return analyzer_svn_rev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct analyzer_svn_lc_rev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analyzer_svn_lc_rev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analyzer_svn_lc_rev;
            T& operator()() { return analyzer_svn_lc_rev; }
            const T& operator()() const { return analyzer_svn_lc_rev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct analyzer_svn_url
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analyzer_svn_url";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analyzer_svn_url;
            T& operator()() { return analyzer_svn_url; }
            const T& operator()() const { return analyzer_svn_url; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct roc_flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "roc_flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roc_flags;
            T& operator()() { return roc_flags; }
            const T& operator()() const { return roc_flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace analysis_

  struct analysis: sqlpp::table_t<analysis,
               analysis_::analysis_id,
               analysis_::runlet_id,
               analysis_::seed_id,
               analysis_::time,
               analysis_::bf_checksum,
               analysis_::beam_mode,
               analysis_::n_mps,
               analysis_::n_qrt,
               analysis_::first_event,
               analysis_::last_event,
               analysis_::segment,
               analysis_::slope_calculation,
               analysis_::slope_correction,
               analysis_::root_version,
               analysis_::root_file_time,
               analysis_::root_file_host,
               analysis_::root_file_user,
               analysis_::analyzer_name,
               analysis_::analyzer_argv,
               analysis_::analyzer_svn_rev,
               analysis_::analyzer_svn_lc_rev,
               analysis_::analyzer_svn_url,
               analysis_::roc_flags>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "analysis";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T analysis;
        T& operator()() { return analysis; }
        const T& operator()() const { return analysis; }
      };
    };
  };
  namespace parameter_files_
  {
    struct parameter_file_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "parameter_file_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parameter_file_id;
            T& operator()() { return parameter_file_id; }
            const T& operator()() const { return parameter_file_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct filename
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "filename";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filename;
            T& operator()() { return filename; }
            const T& operator()() const { return filename; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace parameter_files_

  struct parameter_files: sqlpp::table_t<parameter_files,
               parameter_files_::parameter_file_id,
               parameter_files_::analysis_id,
               parameter_files_::filename>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "parameter_files";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T parameter_files;
        T& operator()() { return parameter_files; }
        const T& operator()() const { return parameter_files; }
      };
    };
  };
  namespace error_code_
  {
    struct error_code_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error_code_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error_code_id;
            T& operator()() { return error_code_id; }
            const T& operator()() const { return error_code_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quantity;
            T& operator()() { return quantity; }
            const T& operator()() const { return quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace error_code_

  struct error_code: sqlpp::table_t<error_code,
               error_code_::error_code_id,
               error_code_::quantity>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "error_code";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T error_code;
        T& operator()() { return error_code; }
        const T& operator()() const { return error_code; }
      };
    };
  };
  namespace general_errors_
  {
    struct general_errors_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "general_errors_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T general_errors_id;
            T& operator()() { return general_errors_id; }
            const T& operator()() const { return general_errors_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct error_code_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error_code_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error_code_id;
            T& operator()() { return error_code_id; }
            const T& operator()() const { return error_code_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  } // namespace general_errors_

  struct general_errors: sqlpp::table_t<general_errors,
               general_errors_::general_errors_id,
               general_errors_::analysis_id,
               general_errors_::error_code_id,
               general_errors_::n>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "general_errors";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T general_errors;
        T& operator()() { return general_errors; }
        const T& operator()() const { return general_errors; }
      };
    };
  };
  namespace measurement_type_
  {
    struct measurement_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "measurement_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T measurement_type_id;
            T& operator()() { return measurement_type_id; }
            const T& operator()() const { return measurement_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct units
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "units";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T units;
            T& operator()() { return units; }
            const T& operator()() const { return units; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace measurement_type_

  struct measurement_type: sqlpp::table_t<measurement_type,
               measurement_type_::measurement_type_id,
               measurement_type_::units,
               measurement_type_::title>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "measurement_type";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T measurement_type;
        T& operator()() { return measurement_type; }
        const T& operator()() const { return measurement_type; }
      };
    };
  };
  namespace slope_type_
  {
    struct slope_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slope_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slope_type_id;
            T& operator()() { return slope_type_id; }
            const T& operator()() const { return slope_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct slope
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slope";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slope;
            T& operator()() { return slope; }
            const T& operator()() const { return slope; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct units
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "units";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T units;
            T& operator()() { return units; }
            const T& operator()() const { return units; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace slope_type_

  struct slope_type: sqlpp::table_t<slope_type,
               slope_type_::slope_type_id,
               slope_type_::slope,
               slope_type_::units,
               slope_type_::title>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "slope_type";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T slope_type;
        T& operator()() { return slope_type; }
        const T& operator()() const { return slope_type; }
      };
    };
  };
  namespace monitor_
  {
    struct monitor_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "monitor_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T monitor_id;
            T& operator()() { return monitor_id; }
            const T& operator()() const { return monitor_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quantity;
            T& operator()() { return quantity; }
            const T& operator()() const { return quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace monitor_

  struct monitor: sqlpp::table_t<monitor,
               monitor_::monitor_id,
               monitor_::quantity,
               monitor_::title>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "monitor";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T monitor;
        T& operator()() { return monitor; }
        const T& operator()() const { return monitor; }
      };
    };
  };
  namespace main_detector_
  {
    struct main_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "main_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T main_detector_id;
            T& operator()() { return main_detector_id; }
            const T& operator()() const { return main_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quantity;
            T& operator()() { return quantity; }
            const T& operator()() const { return quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace main_detector_

  struct main_detector: sqlpp::table_t<main_detector,
               main_detector_::main_detector_id,
               main_detector_::quantity,
               main_detector_::title>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "main_detector";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T main_detector;
        T& operator()() { return main_detector; }
        const T& operator()() const { return main_detector; }
      };
    };
  };
  namespace lumi_detector_
  {
    struct lumi_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lumi_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lumi_detector_id;
            T& operator()() { return lumi_detector_id; }
            const T& operator()() const { return lumi_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quantity;
            T& operator()() { return quantity; }
            const T& operator()() const { return quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace lumi_detector_

  struct lumi_detector: sqlpp::table_t<lumi_detector,
               lumi_detector_::lumi_detector_id,
               lumi_detector_::quantity,
               lumi_detector_::title>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lumi_detector";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T lumi_detector;
        T& operator()() { return lumi_detector; }
        const T& operator()() const { return lumi_detector; }
      };
    };
  };
  namespace md_data_
  {
    struct md_data_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "md_data_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T md_data_id;
            T& operator()() { return md_data_id; }
            const T& operator()() const { return md_data_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct main_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "main_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T main_detector_id;
            T& operator()() { return main_detector_id; }
            const T& operator()() const { return main_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct measurement_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "measurement_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T measurement_type_id;
            T& operator()() { return measurement_type_id; }
            const T& operator()() const { return measurement_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct subblock
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subblock";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subblock;
            T& operator()() { return subblock; }
            const T& operator()() const { return subblock; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error;
            T& operator()() { return error; }
            const T& operator()() const { return error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace md_data_

  struct md_data: sqlpp::table_t<md_data,
               md_data_::md_data_id,
               md_data_::analysis_id,
               md_data_::main_detector_id,
               md_data_::measurement_type_id,
               md_data_::subblock,
               md_data_::n,
               md_data_::value,
               md_data_::error>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "md_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T md_data;
        T& operator()() { return md_data; }
        const T& operator()() const { return md_data; }
      };
    };
  };
  namespace md_errors_
  {
    struct md_errors_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "md_errors_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T md_errors_id;
            T& operator()() { return md_errors_id; }
            const T& operator()() const { return md_errors_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct main_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "main_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T main_detector_id;
            T& operator()() { return main_detector_id; }
            const T& operator()() const { return main_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct error_code_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error_code_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error_code_id;
            T& operator()() { return error_code_id; }
            const T& operator()() const { return error_code_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  } // namespace md_errors_

  struct md_errors: sqlpp::table_t<md_errors,
               md_errors_::md_errors_id,
               md_errors_::analysis_id,
               md_errors_::main_detector_id,
               md_errors_::error_code_id,
               md_errors_::n>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "md_errors";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T md_errors;
        T& operator()() { return md_errors; }
        const T& operator()() const { return md_errors; }
      };
    };
  };
  namespace lumi_data_
  {
    struct lumi_data_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lumi_data_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lumi_data_id;
            T& operator()() { return lumi_data_id; }
            const T& operator()() const { return lumi_data_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct lumi_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lumi_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lumi_detector_id;
            T& operator()() { return lumi_detector_id; }
            const T& operator()() const { return lumi_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct measurement_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "measurement_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T measurement_type_id;
            T& operator()() { return measurement_type_id; }
            const T& operator()() const { return measurement_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct subblock
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subblock";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subblock;
            T& operator()() { return subblock; }
            const T& operator()() const { return subblock; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error;
            T& operator()() { return error; }
            const T& operator()() const { return error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace lumi_data_

  struct lumi_data: sqlpp::table_t<lumi_data,
               lumi_data_::lumi_data_id,
               lumi_data_::analysis_id,
               lumi_data_::lumi_detector_id,
               lumi_data_::measurement_type_id,
               lumi_data_::subblock,
               lumi_data_::n,
               lumi_data_::value,
               lumi_data_::error>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lumi_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T lumi_data;
        T& operator()() { return lumi_data; }
        const T& operator()() const { return lumi_data; }
      };
    };
  };
  namespace lumi_errors_
  {
    struct lumi_errors_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lumi_errors_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lumi_errors_id;
            T& operator()() { return lumi_errors_id; }
            const T& operator()() const { return lumi_errors_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct lumi_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lumi_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lumi_detector_id;
            T& operator()() { return lumi_detector_id; }
            const T& operator()() const { return lumi_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct error_code_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error_code_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error_code_id;
            T& operator()() { return error_code_id; }
            const T& operator()() const { return error_code_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  } // namespace lumi_errors_

  struct lumi_errors: sqlpp::table_t<lumi_errors,
               lumi_errors_::lumi_errors_id,
               lumi_errors_::analysis_id,
               lumi_errors_::lumi_detector_id,
               lumi_errors_::error_code_id,
               lumi_errors_::n>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lumi_errors";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T lumi_errors;
        T& operator()() { return lumi_errors; }
        const T& operator()() const { return lumi_errors; }
      };
    };
  };
  namespace beam_
  {
    struct beam_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beam_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beam_id;
            T& operator()() { return beam_id; }
            const T& operator()() const { return beam_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct monitor_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "monitor_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T monitor_id;
            T& operator()() { return monitor_id; }
            const T& operator()() const { return monitor_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct measurement_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "measurement_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T measurement_type_id;
            T& operator()() { return measurement_type_id; }
            const T& operator()() const { return measurement_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct subblock
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subblock";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subblock;
            T& operator()() { return subblock; }
            const T& operator()() const { return subblock; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error;
            T& operator()() { return error; }
            const T& operator()() const { return error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace beam_

  struct beam: sqlpp::table_t<beam,
               beam_::beam_id,
               beam_::analysis_id,
               beam_::monitor_id,
               beam_::measurement_type_id,
               beam_::subblock,
               beam_::n,
               beam_::value,
               beam_::error>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "beam";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T beam;
        T& operator()() { return beam; }
        const T& operator()() const { return beam; }
      };
    };
  };
  namespace beam_errors_
  {
    struct beam_errors_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beam_errors_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beam_errors_id;
            T& operator()() { return beam_errors_id; }
            const T& operator()() const { return beam_errors_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct monitor_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "monitor_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T monitor_id;
            T& operator()() { return monitor_id; }
            const T& operator()() const { return monitor_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct error_code_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error_code_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error_code_id;
            T& operator()() { return error_code_id; }
            const T& operator()() const { return error_code_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  } // namespace beam_errors_

  struct beam_errors: sqlpp::table_t<beam_errors,
               beam_errors_::beam_errors_id,
               beam_errors_::analysis_id,
               beam_errors_::monitor_id,
               beam_errors_::error_code_id,
               beam_errors_::n>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "beam_errors";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T beam_errors;
        T& operator()() { return beam_errors; }
        const T& operator()() const { return beam_errors; }
      };
    };
  };
  namespace md_slope_
  {
    struct md_slope_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "md_slope_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T md_slope_id;
            T& operator()() { return md_slope_id; }
            const T& operator()() const { return md_slope_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct slope_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slope_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slope_type_id;
            T& operator()() { return slope_type_id; }
            const T& operator()() const { return slope_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct measurement_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "measurement_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T measurement_type_id;
            T& operator()() { return measurement_type_id; }
            const T& operator()() const { return measurement_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct main_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "main_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T main_detector_id;
            T& operator()() { return main_detector_id; }
            const T& operator()() const { return main_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct subblock
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subblock";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subblock;
            T& operator()() { return subblock; }
            const T& operator()() const { return subblock; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error;
            T& operator()() { return error; }
            const T& operator()() const { return error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace md_slope_

  struct md_slope: sqlpp::table_t<md_slope,
               md_slope_::md_slope_id,
               md_slope_::analysis_id,
               md_slope_::slope_type_id,
               md_slope_::measurement_type_id,
               md_slope_::main_detector_id,
               md_slope_::subblock,
               md_slope_::n,
               md_slope_::value,
               md_slope_::error>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "md_slope";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T md_slope;
        T& operator()() { return md_slope; }
        const T& operator()() const { return md_slope; }
      };
    };
  };
  namespace lumi_slope_
  {
    struct lumi_slope_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lumi_slope_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lumi_slope_id;
            T& operator()() { return lumi_slope_id; }
            const T& operator()() const { return lumi_slope_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct slope_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slope_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slope_type_id;
            T& operator()() { return slope_type_id; }
            const T& operator()() const { return slope_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct measurement_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "measurement_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T measurement_type_id;
            T& operator()() { return measurement_type_id; }
            const T& operator()() const { return measurement_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct lumi_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lumi_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lumi_detector_id;
            T& operator()() { return lumi_detector_id; }
            const T& operator()() const { return lumi_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct subblock
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subblock";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subblock;
            T& operator()() { return subblock; }
            const T& operator()() const { return subblock; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error;
            T& operator()() { return error; }
            const T& operator()() const { return error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace lumi_slope_

  struct lumi_slope: sqlpp::table_t<lumi_slope,
               lumi_slope_::lumi_slope_id,
               lumi_slope_::analysis_id,
               lumi_slope_::slope_type_id,
               lumi_slope_::measurement_type_id,
               lumi_slope_::lumi_detector_id,
               lumi_slope_::subblock,
               lumi_slope_::n,
               lumi_slope_::value,
               lumi_slope_::error>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lumi_slope";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T lumi_slope;
        T& operator()() { return lumi_slope; }
        const T& operator()() const { return lumi_slope; }
      };
    };
  };
  namespace slow_controls_settings_
  {
    struct slow_controls_settings_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slow_controls_settings_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slow_controls_settings_id;
            T& operator()() { return slow_controls_settings_id; }
            const T& operator()() const { return slow_controls_settings_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct runlet_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "runlet_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T runlet_id;
            T& operator()() { return runlet_id; }
            const T& operator()() const { return runlet_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct slow_helicity_plate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slow_helicity_plate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slow_helicity_plate;
            T& operator()() { return slow_helicity_plate; }
            const T& operator()() const { return slow_helicity_plate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct passive_helicity_plate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "passive_helicity_plate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T passive_helicity_plate;
            T& operator()() { return passive_helicity_plate; }
            const T& operator()() const { return passive_helicity_plate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct wien_reversal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wien_reversal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wien_reversal;
            T& operator()() { return wien_reversal; }
            const T& operator()() const { return wien_reversal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct precession_reversal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "precession_reversal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T precession_reversal;
            T& operator()() { return precession_reversal; }
            const T& operator()() const { return precession_reversal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct helicity_length
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "helicity_length";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T helicity_length;
            T& operator()() { return helicity_length; }
            const T& operator()() const { return helicity_length; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct charge_feedback
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charge_feedback";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charge_feedback;
            T& operator()() { return charge_feedback; }
            const T& operator()() const { return charge_feedback; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct position_feedback
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "position_feedback";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T position_feedback;
            T& operator()() { return position_feedback; }
            const T& operator()() const { return position_feedback; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct qtor_current
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "qtor_current";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T qtor_current;
            T& operator()() { return qtor_current; }
            const T& operator()() const { return qtor_current; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct target_position
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "target_position";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T target_position;
            T& operator()() { return target_position; }
            const T& operator()() const { return target_position; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace slow_controls_settings_

  struct slow_controls_settings: sqlpp::table_t<slow_controls_settings,
               slow_controls_settings_::slow_controls_settings_id,
               slow_controls_settings_::runlet_id,
               slow_controls_settings_::slow_helicity_plate,
               slow_controls_settings_::passive_helicity_plate,
               slow_controls_settings_::wien_reversal,
               slow_controls_settings_::precession_reversal,
               slow_controls_settings_::helicity_length,
               slow_controls_settings_::charge_feedback,
               slow_controls_settings_::position_feedback,
               slow_controls_settings_::qtor_current,
               slow_controls_settings_::target_position>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "slow_controls_settings";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T slow_controls_settings;
        T& operator()() { return slow_controls_settings; }
        const T& operator()() const { return slow_controls_settings; }
      };
    };
  };
  namespace sc_detector_
  {
    struct sc_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sc_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sc_detector_id;
            T& operator()() { return sc_detector_id; }
            const T& operator()() const { return sc_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct units
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "units";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T units;
            T& operator()() { return units; }
            const T& operator()() const { return units; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace sc_detector_

  struct sc_detector: sqlpp::table_t<sc_detector,
               sc_detector_::sc_detector_id,
               sc_detector_::name,
               sc_detector_::units,
               sc_detector_::comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "sc_detector";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T sc_detector;
        T& operator()() { return sc_detector; }
        const T& operator()() const { return sc_detector; }
      };
    };
  };
  namespace slow_controls_data_
  {
    struct slow_controls_data_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slow_controls_data_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slow_controls_data_id;
            T& operator()() { return slow_controls_data_id; }
            const T& operator()() const { return slow_controls_data_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct runlet_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "runlet_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T runlet_id;
            T& operator()() { return runlet_id; }
            const T& operator()() const { return runlet_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct sc_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sc_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sc_detector_id;
            T& operator()() { return sc_detector_id; }
            const T& operator()() const { return sc_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T error;
            T& operator()() { return error; }
            const T& operator()() const { return error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct min_value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min_value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T min_value;
            T& operator()() { return min_value; }
            const T& operator()() const { return min_value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct max_value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max_value;
            T& operator()() { return max_value; }
            const T& operator()() const { return max_value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace slow_controls_data_

  struct slow_controls_data: sqlpp::table_t<slow_controls_data,
               slow_controls_data_::slow_controls_data_id,
               slow_controls_data_::runlet_id,
               slow_controls_data_::sc_detector_id,
               slow_controls_data_::n,
               slow_controls_data_::value,
               slow_controls_data_::error,
               slow_controls_data_::min_value,
               slow_controls_data_::max_value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "slow_controls_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T slow_controls_data;
        T& operator()() { return slow_controls_data; }
        const T& operator()() const { return slow_controls_data; }
      };
    };
  };
  namespace slow_controls_strings_
  {
    struct slow_controls_strings_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slow_controls_strings_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slow_controls_strings_id;
            T& operator()() { return slow_controls_strings_id; }
            const T& operator()() const { return slow_controls_strings_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct runlet_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "runlet_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T runlet_id;
            T& operator()() { return runlet_id; }
            const T& operator()() const { return runlet_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct sc_detector_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sc_detector_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sc_detector_id;
            T& operator()() { return sc_detector_id; }
            const T& operator()() const { return sc_detector_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace slow_controls_strings_

  struct slow_controls_strings: sqlpp::table_t<slow_controls_strings,
               slow_controls_strings_::slow_controls_strings_id,
               slow_controls_strings_::runlet_id,
               slow_controls_strings_::sc_detector_id,
               slow_controls_strings_::value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "slow_controls_strings";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T slow_controls_strings;
        T& operator()() { return slow_controls_strings; }
        const T& operator()() const { return slow_controls_strings; }
      };
    };
  };
  namespace bf_test_
  {
    struct bf_test_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bf_test_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bf_test_id;
            T& operator()() { return bf_test_id; }
            const T& operator()() const { return bf_test_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct test_number
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "test_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T test_number;
            T& operator()() { return test_number; }
            const T& operator()() const { return test_number; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct test_value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "test_value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T test_value;
            T& operator()() { return test_value; }
            const T& operator()() const { return test_value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace bf_test_

  struct bf_test: sqlpp::table_t<bf_test,
               bf_test_::bf_test_id,
               bf_test_::analysis_id,
               bf_test_::test_number,
               bf_test_::test_value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "bf_test";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T bf_test;
        T& operator()() { return bf_test; }
        const T& operator()() const { return bf_test; }
      };
    };
  };
  namespace modulation_type_
  {
    struct modulation_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modulation_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modulation_type_id;
            T& operator()() { return modulation_type_id; }
            const T& operator()() const { return modulation_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace modulation_type_

  struct modulation_type: sqlpp::table_t<modulation_type,
               modulation_type_::modulation_type_id,
               modulation_type_::type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "modulation_type";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T modulation_type;
        T& operator()() { return modulation_type; }
        const T& operator()() const { return modulation_type; }
      };
    };
  };
  namespace beam_optics_
  {
    struct beam_optics_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beam_optics_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beam_optics_id;
            T& operator()() { return beam_optics_id; }
            const T& operator()() const { return beam_optics_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct analysis_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "analysis_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T analysis_id;
            T& operator()() { return analysis_id; }
            const T& operator()() const { return analysis_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct monitor_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "monitor_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T monitor_id;
            T& operator()() { return monitor_id; }
            const T& operator()() const { return monitor_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct modulation_type_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modulation_type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modulation_type_id;
            T& operator()() { return modulation_type_id; }
            const T& operator()() const { return modulation_type_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct n
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "n";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T n;
            T& operator()() { return n; }
            const T& operator()() const { return n; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct amplitude
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "amplitude";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amplitude;
            T& operator()() { return amplitude; }
            const T& operator()() const { return amplitude; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct phase
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phase";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phase;
            T& operator()() { return phase; }
            const T& operator()() const { return phase; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct offset
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "offset";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T offset;
            T& operator()() { return offset; }
            const T& operator()() const { return offset; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct a_error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "a_error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T a_error;
            T& operator()() { return a_error; }
            const T& operator()() const { return a_error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct p_error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "p_error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T p_error;
            T& operator()() { return p_error; }
            const T& operator()() const { return p_error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct o_error
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "o_error";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T o_error;
            T& operator()() { return o_error; }
            const T& operator()() const { return o_error; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct gof_para
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gof_para";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gof_para;
            T& operator()() { return gof_para; }
            const T& operator()() const { return gof_para; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace beam_optics_

  struct beam_optics: sqlpp::table_t<beam_optics,
               beam_optics_::beam_optics_id,
               beam_optics_::analysis_id,
               beam_optics_::monitor_id,
               beam_optics_::modulation_type_id,
               beam_optics_::n,
               beam_optics_::amplitude,
               beam_optics_::phase,
               beam_optics_::offset,
               beam_optics_::a_error,
               beam_optics_::p_error,
               beam_optics_::o_error,
               beam_optics_::gof_para>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "beam_optics";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T beam_optics;
        T& operator()() { return beam_optics; }
        const T& operator()() const { return beam_optics; }
      };
    };
  };
} // namespace QwParitySchema
