---
name: Build LCG on CVMFS

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # Standard builds without sanitizers
          - release: "LCG_106"
            arch: "x86_64"
            os: "el9"
            compiler: "gcc13"
            opt: "opt"
          - release: "LCG_107"
            arch: "x86_64"
            os: "el9"
            compiler: "clang16"
            opt: "opt"
          - release: "LCG_107"
            arch: "x86_64"
            os: "el9"
            compiler: "gcc14"
            opt: "opt"
    steps:
      - uses: actions/checkout@v3
      - uses: cvmfs-contrib/github-action-cvmfs@v3
        with:
          cvmfs_repositories: 'sft.cern.ch,geant4.cern.ch'
      - name: Install ccache
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache
      - name: Setup ccache cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ matrix.LCG }}-${{ github.ref_name }}
          restore-keys: |
            ccache-${{ matrix.LCG }}-
            ccache-
      - name: Configure ccache
        run: |
          ccache --set-config=cache_dir=$HOME/.ccache
          ccache --set-config=max_size=1G
          ccache --set-config=compression=true
          ccache --zero-stats
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
      - name: Create qwparity.conf symlink
        run: ln -sf Parity/prminput/qwparity_simple.conf qwparity.conf
      - uses: aidasoft/run-lcg-view@v1
        with:
          release-platform: ${{ matrix.release }}/${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.opt }}
          run: |
            echo "::group::Dependencies"
            # Install dependencies
            PYTHONHOME="" PYTHONPATH="" dnf install -y time
            echo "::endgroup::"

            echo "::group::Configuration"
            # Set BOOST_INC_DIR and BOOST_LIB_DIR to point to
            # LCG-provided Boost installation
            LCG_PATH="/cvmfs/sft.cern.ch/lcg/views/${{ matrix.release }}/${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.opt }}"
            export BOOST_INC_DIR="${LCG_PATH}/include"
            export BOOST_LIB_DIR="${LCG_PATH}/lib"

            # Generate setup scripts
            chmod +x SetupFiles/make_SET_ME_UP
            SetupFiles/make_SET_ME_UP
            echo "::endgroup::"

            echo "::group::Compilation"
            # Build the project with ccache
            cmake -Bbuild -S. -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_FLAGS="-g -pg"
            cmake --build build -j$(nproc)
            echo "::endgroup::"
            
            echo "::group::ccache statistics"
            ccache --show-stats
            echo "::endgroup::"

            echo "::group::Mock data generation"
            # Run the mock data generator and analysis as described in README
            source SetupFiles/SET_ME_UP.bash
            
            # Generate mock data
            /usr/bin/time -v \
            build/qwmockdatagenerator -r 4 -e 1:20000 --config qwparity_simple.conf --detectors mock_newdets.map --data .
            echo "::endgroup::"
            
            echo "::group::Mock data analysis"
            # Analyze the generated mock data
            /usr/bin/time -v \
            build/qwparity -r 4 --config qwparity_simple.conf --detectors mock_newdets.map --datahandlers mock_datahandlers.map --data . --rootfiles . --write-promptsummary
            echo "::endgroup::"

            echo "::group:: Profile analysis"
            gprof build/qwparity | tee qwparity.txt
            echo "::endgroup::"

      - name: Compress build directory
        run: tar -caf build.tar.zst build/
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: build.tar.zst
          retention-days: 7
          if-no-files-found: error

      - name: Upload profiling analysis
        uses: actions/upload-artifact@v4
        with:
          name: gprof-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            qwparity.txt
          retention-days: 7
          if-no-files-found: error

      - name: Upload prompt summary
        uses: actions/upload-artifact@v4
        with:
          name: prompt-summary-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            summary_*.txt
          retention-days: 7
          if-no-files-found: error

      - name: Upload regression alias definitions
        uses: actions/upload-artifact@v4
        with:
          name: regalias-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            *regalias*.C
          retention-days: 7
          if-no-files-found: error

      - name: Download target branch artifacts (prompt summary)
        if: github.event_name == 'pull_request'
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-lcg-cvmfs.yml
          branch: ${{ github.event.pull_request.base.ref }}
          name: prompt-summary-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: ./target
          if_no_artifact_found: warn

      - name: Download target branch artifacts (regalias)
        if: github.event_name == 'pull_request'
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-lcg-cvmfs.yml
          branch: ${{ github.event.pull_request.base.ref }}
          name: regalias-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: ./target
          if_no_artifact_found: warn

      - name: Compare artifacts
        if: github.event_name == 'pull_request'
        run: |
          echo "Comparing artifacts for ${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}"

          # Check if target artifacts exist
          if [ ! -d "./target" ] || [ -z "$(ls -A ./target)" ]; then
            echo "⚠️  No target branch artifacts found. This may be the first run or target branch hasn't been built recently."
            echo "Skipping comparison for this configuration."
            exit 0
          fi

          # Find summary files in both directories
          current_files=$(find ./ -maxdepth 1 -name "summary_*.txt" -o -name "*regalias*.C" | sort)
          target_files=$(find ./target -name "summary_*.txt" -o -name "*regalias*.C" | sort)

          echo "Current files found:"
          echo "$current_files"
          echo "Target files found:"
          echo "$target_files"

          # Compare each file
          comparison_failed=false
          for current_file in $current_files; do
            filename=$(basename "$current_file")
            target_file="./target/$filename"

            if [ ! -f "$target_file" ]; then
              echo "❌ Target file $filename not found"
              comparison_failed=true
              continue
            fi

            echo "Comparing $filename..."

            # Skip lines containing timestamps and metadata that can vary
            if diff -q <(grep -v "Start Time:\|End Time:" "$current_file") <(grep -v "Start Time:\|End Time:" "$target_file") > /dev/null; then
              echo "✅ $filename: No meaningful differences found"
            else
              echo "❌ $filename: Differences found beyond timestamps"
              echo "--- Expected (target branch) ---"
              grep -v "Start Time:\|End Time:" "$target_file" | head -20
              echo "--- Actual (current PR) ---"
              grep -v "Start Time:\|End Time:" "$current_file" | head -20
              echo "--- Detailed diff ---"
              diff -u <(grep -v "Start Time:\|End Time:" "$target_file") <(grep -v "Start Time:\|End Time:" "$current_file") | head -50
              comparison_failed=true
            fi
          done

          if [ "$comparison_failed" = "true" ]; then
            echo "❌ Artifact comparison failed. Changes detected in artifacts beyond timestamps."
            exit 1
          else
            echo "✅ All artifacts match expected results (ignoring timestamps)."
          fi
          

  valgrind:
    runs-on: ubuntu-latest
    needs: linux
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - release: "LCG_106"
            arch: "x86_64"
            os: "el9"
            compiler: "gcc13"
            opt: "opt"
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: .
      - name: Uncompress build artifact
        run: tar -xaf build.tar.zst

      - uses: cvmfs-contrib/github-action-cvmfs@v3
        with:
          cvmfs_repositories: 'sft.cern.ch,geant4.cern.ch'
      - uses: aidasoft/run-lcg-view@v1
        with:
          release-platform: ${{ matrix.release }}/${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.opt }}
          run: |
            echo "::group::Run callgrind on mock data analysis"
            valgrind --tool=callgrind --instr-atstart=no \
              build/qwparity -r 4 --config qwparity_simple.conf --detectors mock_newdets.map --datahandlers mock_datahandlers.map --data . --rootfiles . --write-promptsummary --callgrind-instr-start-event-loop
            echo "::endgroup::"

            echo "::group::Annotate callgrind info on source code"
            callgrind_annotate \
              -I=Parity/src/ -I=Parity/include -I=Analysis/src -I=Analysis/include \
              callgrind.out.* Parity/main/QwParity.cc | tee -a callgrind.txt
            echo "::endgroup::"

      - name: Upload callgrind analysis
        uses: actions/upload-artifact@v4
        with:
          name: callgrind-${{ matrix.release }}-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            callgrind.txt
          retention-days: 7
          if-no-files-found: error
