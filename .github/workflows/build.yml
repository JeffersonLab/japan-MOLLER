name: linux-eic-shell

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  merge_group:
  workflow_dispatch:
    inputs:
      release:
        description: 'Default LCG release'
        default: 'LCG_105'
        required: false
        type: string
      platform:
        description: 'Default LCG platform'
        default: 'x86_64-ubuntu2204-gcc11-opt'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  release: ${{ inputs.release || 'LCG_105' }}
  platform: ${{ inputs.platform || 'x86_64-ubuntu2204-gcc11-opt' }}
  clang-tidy-release: dev3
  clang-tidy-platform: x86_64-el9-clang16-opt
  clang-tidy-CC: clang
  clang-tidy-CMAKE_BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - release: LCG_105
            platform: x86_64-ubuntu2204-gcc11-opt
            CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Release
          - release: LCG_105
            platform: x86_64-ubuntu2204-gcc11-opt
            CC: gcc
            CXX: g++
            CMAKE_BUILD_TYPE: Debug
          - release: dev3
            platform: x86_64-el9-clang16-opt
            CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Release
          - release: dev3
            platform: x86_64-el9-clang16-opt
            CC: clang
            CXX: clang++
            CMAKE_BUILD_TYPE: Debug
    env:
      PREFIX: ${{ github.workspace }}/install
    steps:
    - uses: actions/checkout@v4
      with:
        filter: "tree:0"
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        echo "timestamp=$(date --iso-8601=minutes)" >> $GITHUB_OUTPUT
    - name: Retrieve ccache cache files
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ccache-${{ matrix.CC }}-${{ matrix.release }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.event.pull_request.head.ref || github.ref_name }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
             ccache-${{ matrix.CC }}-${{ matrix.release }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.ref_name }}-
             ccache-${{ matrix.CC }}-${{ matrix.release }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.event.pull_request.head.ref }}-
             ccache-${{ matrix.CC }}-${{ matrix.release }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ github.event.pull_request.base.ref }}-
             ccache-${{ matrix.CC }}-${{ matrix.release }}-${{ matrix.CMAKE_BUILD_TYPE }}-
             ccache-${{ matrix.CC }}-${{ matrix.release }}-
             ccache-${{ matrix.CC }}-
             ccache-
    - name: Configure ccache
      run: |
        mkdir -p ~/.ccache/
        echo "cache_dir=${{ github.workspace }}/.ccache" >> ~/.ccache/ccache.conf
        echo "max_size=500MB" >> ~/.ccache/ccache.conf
        echo "compression=true" >> ~/.ccache/ccache.conf
    - uses: cvmfs-contrib/github-action-cvmfs@v4
    - uses: aidasoft/run-lcg-view@v3
      with:
        release-platform: ${{ matrix.release }}/${{ matrix.platform }}
        run: |
          export CC=${{ matrix.CC }} CXX=${{ matrix.CXX }}
          cmake -B build -S . -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DCMAKE_CXX_STANDARD=20 -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build build -- -k -j $(getconf _NPROCESSORS_ONLN) install
    - name: Compress install directory
      run: tar -caf install.tar.zst install/
    - name: Upload install directory
      uses: actions/upload-artifact@v4
      with:
        name: install-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ matrix.release }}-${{ matrix.platform }}
        path: install.tar.zst
        if-no-files-found: error
    - name: Compress build directory
      if: matrix.release == env.clang-tidy-release && matrix.platform == env.clang-tidy-platform && matrix.CC == env.clang-tidy-CC && matrix.CMAKE_BUILD_TYPE == env.clang-tidy-CMAKE_BUILD_TYPE
      run: tar -caf build.tar.zst build/
    - name: Upload build directory
      if: matrix.release == env.clang-tidy-release && matrix.platform == env.clang-tidy-platform && matrix.CC == env.clang-tidy-CC && matrix.CMAKE_BUILD_TYPE == env.clang-tidy-CMAKE_BUILD_TYPE
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ matrix.platform }}-${{ matrix.release }}
        path: build.tar.zst
        if-no-files-found: error

  clang-tidy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      with:
        filter: "tree:0"
    - uses: cvmfs-contrib/github-action-cvmfs@v4
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-${{ env.clang-tidy-CC }}-${{ env.clang-tidy-CMAKE_BUILD_TYPE }}-${{ env.clang-tidy-platform }}-${{ env.clang-tidy-release }}
        path: .
    - name: Uncompress build artifact
      run: tar -xaf build.tar.zst
    - name: Run clang-tidy on changed files
      uses: aidasoft/run-lcg-view@v3
      if: ${{ github.event_name == 'pull_request' }}
      with:
        release-platform: ${{ env.clang-tidy-release }}/${{ env.clang-tidy-platform }}
        run: |
          git diff --name-only ${{ github.event.pull_request.head.sha }} ${{ github.event.pull_request.base.sha }} | xargs -n 1000 run-clang-tidy -p build -export-fixes clang_tidy_fixes.yml -extra-arg=-std=c++20 -extra-arg=--gcc-toolchain=${COMPILER_PATH} -checks='-*,bugprone-*,-bugprone-narrowing-conversions,-bugprone-macro-parentheses'
    - name: Run clang-tidy on all files
      uses: aidasoft/run-lcg-view@v3
      if: ${{ github.event_name == 'push' }}
      with:
        release-platform: ${{ env.clang-tidy-release }}/${{ env.clang-tidy-platform }}
        run: |
          run-clang-tidy -p build -export-fixes clang_tidy_fixes.yml -extra-arg=-std=c++20 -extra-arg=--gcc-toolchain=${COMPILER_PATH}
    - name: Upload clang-tidy fixes as artifact
      uses: actions/upload-artifact@v4
      with:
        name: clang-tidy-fixes.yml
        path: clang_tidy_fixes.yml
        if-no-files-found: ignore
    - name: Suggest clang-tidy fixes as PR comments
      uses: platisd/clang-tidy-pr-comments@v1.5.0
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        clang_tidy_fixes: clang_tidy_fixes.yml
        request_changes: true
        suggestions_per_comment: 10

  mock:
    runs-on: ubuntu-latest
    needs:
    - build
    strategy:
      matrix:
        CC: [gcc]
        CMAKE_BUILD_TYPE: [Release]
        runs:
        - 1:1
        events:
        - 1:20000
    steps:
    - name: Checkout .github
      uses: actions/checkout@v4
    - name: Download install directory
      uses: actions/download-artifact@v4
      with:
        name: install-${{ matrix.CC }}-${{ matrix.CMAKE_BUILD_TYPE }}-${{ env.release }}-${{ env.platform }}
    - name: Uncompress install directory
      run: tar -xaf install.tar.zst
    - uses: cvmfs-contrib/github-action-cvmfs@v4
    - name: Run mock data generator and analysis
      uses: aidasoft/run-lcg-view@v3
      with:
        release-platform: ${{ env.release }}/${{ env.platform }}
        run: |
          mkdir -p data/
          install/bin/qwmockdatagenerator -r ${{ matrix.runs }} -e ${{ matrix.events }} --config qwparity_simple.conf --detectors mock_newdets.map --data data/
          mkdir -p rootfiles/
          install/bin/qwparity -r ${{ matrix.runs }} --config qwparity_simple.conf --detectors mock_newdets.map --data-handler mock_datahandlers.map --data data/ --rootfiles rootfiles/
    - name: Upload mock data
      uses: actions/upload-artifact@v4
      with:
        name: QwMock.log
        path: data/*.log
        if-no-files-found: error
    - name: Upload analysis
      uses: actions/upload-artifact@v4
      with:
        name: QwMock.root
        path: rootfiles/*.root
        if-no-files-found: error
